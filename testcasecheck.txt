using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Pecunia.BusinessLayer;
using Pecunia.Helpers;
using Pecunia.Entities;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Capgemini.Pecunia.UnitTests
{
    [TestClass]
    public class AddCustomerBLTest
    {
        /// <summary>
        /// Add Customer to the Collection if it is valid.
        /// </summary>
        [TestMethod]
        public async Task AddValidCustomer()
        {
            //Arrange
            CustomerBL customerBL = new CustomerBL();
            Customer customer = new Customer() { CustomerName = "Scott", CustomerMobile = "9876543210", CustomerAddress = "ScZXCV254GV", Email = "scott@gmail.com", CustomerAadharNumber = "82573098851", CustomerPANNumber = "ADKPC1977R", CustomerGender = PecuniaHelpers.Gender.Male, CustomerDOB = Convert.ToDateTime("1997-02-22"), WorkExperience = 3.5, AnnualIncome = 234567 };
            bool isAdded = false;
            string errorMessage = null;

            //Act
            try
            {
                isAdded = await customerBL.AddCustomerBL(customer);
            }
            catch (Exception ex)
            {
                isAdded = false;
                errorMessage = ex.Message;
            }
            finally
            {
                //Assert
                Assert.IsTrue(isAdded, errorMessage);
            }
        }

        /// <summary>
        /// Customer Name can't be null
        /// </summary>
        [TestMethod]
        public async Task CustomerNameCanNotBeNull()
        {
            //Arrange
            CustomerBL customerBL = new CustomerBL();
            Customer customer = new Customer() { CustomerName = null, CustomerMobile = "9876543210", CustomerAddress = "ScZXCV254GV", Email = "scott@gmail.com", CustomerAadharNumber = "82573098851", CustomerPANNumber = "ADKPC1977R", CustomerGender = PecuniaHelpers.Gender.Male, CustomerDOB = Convert.ToDateTime("1997-02-22"), WorkExperience = 3.5, AnnualIncome = 234567 };
            bool isAdded = false;
            string errorMessage = null;

            //Act
            try
            {
                isAdded = await customerBL.AddCustomerBL(customer);
            }
            catch (Exception ex)
            {
                isAdded = false;
                errorMessage = ex.Message;
            }
            finally
            {
                //Assert
                Assert.IsFalse(isAdded, errorMessage);
            }
        }

        /// <summary>
        /// Customer Mobile can't be null
        /// </summary>
        [TestMethod]
        public async Task CustomerMobileCanNotBeNull()
        {
            //Arrange
            CustomerBL CustomerBL = new CustomerBL();
            Customer Customer = new Customer() { CustomerName = "Scott", CustomerMobile = null, CustomerAddress = "ScZXCV254GV", Email = "scott@gmail.com", CustomerAadharNumber = "82573098851", CustomerPANNumber = "ADKPC1977R", CustomerGender = PecuniaHelpers.Gender.Male, CustomerDOB = Convert.ToDateTime("1997-02-22"), WorkExperience = 3.5, AnnualIncome = 234567 };
            bool isAdded = false;
            string errorMessage = null;

            //Act
            try
            {
                isAdded = await CustomerBL.AddCustomerBL(Customer);
            }
            catch (Exception ex)
            {
                isAdded = false;
                errorMessage = ex.Message;
            }
            finally
            {
                //Assert
                Assert.IsFalse(isAdded, errorMessage);
            }
        }

        /// <summary>
        /// Customer Address can't be null
        /// </summary>
        [TestMethod]
        public async Task CustomerAddressCanNotBeNull()
        {
            //Arrange
            CustomerBL CustomerBL = new CustomerBL();
            Customer Customer = new Customer() { CustomerName = "Scott", CustomerMobile = "9179998190", CustomerAddress = null, Email = "scott@gmail.com", CustomerAadharNumber = "82573098851", CustomerPANNumber = "ADKPC1977R", CustomerGender = PecuniaHelpers.Gender.Male, CustomerDOB = Convert.ToDateTime("1997-02-22"), WorkExperience = 3.5, AnnualIncome = 234567 };
            bool isAdded = false;
            string errorMessage = null;

            //Act
            try
            {
                isAdded = await CustomerBL.AddCustomerBL(Customer);
            }
            catch (Exception ex)
            {
                isAdded = false;
                errorMessage = ex.Message;
            }
            finally
            {
                //Assert
                Assert.IsFalse(isAdded, errorMessage);
            }
        }

        /// <summary>
        /// Customer Email can't be null
        /// </summary>
        [TestMethod]
        public async Task CustomerEmailCanNotBeNull()
        {
            //Arrange
            CustomerBL CustomerBL = new CustomerBL();
            Customer Customer = new Customer() { CustomerName = "Scott", CustomerMobile = "9876543210", CustomerAddress = "ScZXCV254GV", Email = null, CustomerAadharNumber = "82573098851", CustomerPANNumber = "ADKPC1977R", CustomerGender = PecuniaHelpers.Gender.Male, CustomerDOB = Convert.ToDateTime("1997-02-22"), WorkExperience = 3.5, AnnualIncome = 234567 };
            bool isAdded = false;
            string errorMessage = null;

            //Act
            try
            {
                isAdded = await CustomerBL.AddCustomerBL(Customer);
            }
            catch (Exception ex)
            {
                isAdded = false;
                errorMessage = ex.Message;
            }
            finally
            {
                //Assert
                Assert.IsFalse(isAdded, errorMessage);
            }
        }
        /// <summary>
        /// Customer Aadhar can't be null
        /// </summary>
        [TestMethod]
        public async Task CustomerAadharNumberCanNotBeNull()
        {
            //Arrange
            CustomerBL customerBL = new CustomerBL();
            Customer customer = new Customer() { CustomerName = "scott", CustomerMobile = "9876543210", CustomerAddress = "ScZXCV254GV", Email = "scott@gmail.com", CustomerAadharNumber = null, CustomerPANNumber = "ADKPC1977R", CustomerGender = PecuniaHelpers.Gender.Male, CustomerDOB = Convert.ToDateTime("1997-02-22"), WorkExperience = 3.5, AnnualIncome = 234567 };
            bool isAdded = false;
            string errorMessage = null;

            //Act
            try
            {
                isAdded = await customerBL.AddCustomerBL(customer);
            }
            catch (Exception ex)
            {
                isAdded = false;
                errorMessage = ex.Message;
            }
            finally
            {
                //Assert
                Assert.IsFalse(isAdded, errorMessage);
            }
        }

        /// <summary>
        /// Customer PAN can't be null
        /// </summary>
        [TestMethod]
        public async Task CustomerPANNumberCanNotBeNull()
        {
            //Arrange
            CustomerBL customerBL = new CustomerBL();
            Customer customer = new Customer() { CustomerName = "scott", CustomerMobile = "9876543210", CustomerAddress = "ScZXCV254GV", Email = "scott@gmail.com", CustomerAadharNumber = "82573098851", CustomerPANNumber = null, CustomerGender = PecuniaHelpers.Gender.Male, CustomerDOB = Convert.ToDateTime("1997-02-22"), WorkExperience = 3.5, AnnualIncome = 234567 };
            bool isAdded = false;
            string errorMessage = null;

            //Act
            try
            {
                isAdded = await customerBL.AddCustomerBL(customer);
            }
            catch (Exception ex)
            {
                isAdded = false;
                errorMessage = ex.Message;
            }
            finally
            {
                //Assert
                Assert.IsFalse(isAdded, errorMessage);
            }
        }
       
        /// <summary>
        /// CustomerName should contain at least two characters
        /// </summary>
        [TestMethod]
        public async Task CustomerNameShouldContainAtLeastTwoCharacters()
        {
            //Arrange
            CustomerBL CustomerBL = new CustomerBL();
            Customer Customer = new Customer() { CustomerName = "J", CustomerMobile = "9876543210", CustomerAddress = "ScZXCV254GV", Email = "scott@gmail.com", CustomerAadharNumber = "82573098851", CustomerPANNumber = "ADKPC1977R", CustomerGender = PecuniaHelpers.Gender.Male, CustomerDOB = Convert.ToDateTime("1997-02-22"), WorkExperience = 3.5, AnnualIncome = 234567 };
            bool isAdded = false;
            string errorMessage = null;

            //Act
            try
            {
                isAdded = await CustomerBL.AddCustomerBL(Customer);
            }
            catch (Exception ex)
            {
                isAdded = false;
                errorMessage = ex.Message;
            }
            finally
            {
                //Assert
                Assert.IsFalse(isAdded, errorMessage);
            }
        }

        /// <summary>
        /// CustomerMobile should be a valid mobile number
        /// </summary>
        [TestMethod]
        public async Task CustomerMobileRegExp()
        {
            //Arrange
            CustomerBL CustomerBL = new CustomerBL();
            Customer Customer = new Customer() { CustomerName = "scott", CustomerMobile = "9876", CustomerAddress = "ScZXCV254GV", Email = "scott@gmail.com", CustomerAadharNumber = "82573098851", CustomerPANNumber = "ADKPC1977R", CustomerGender = PecuniaHelpers.Gender.Male, CustomerDOB = Convert.ToDateTime("1997-02-22"), WorkExperience = 3.5, AnnualIncome = 234567 };
            bool isAdded = false;
            string errorMessage = null;

            //Act
            try
            {
                isAdded = await CustomerBL.AddCustomerBL(Customer);
            }
            catch (Exception ex)
            {
                isAdded = false;
                errorMessage = ex.Message;
            }
            finally
            {
                //Assert
                Assert.IsFalse(isAdded, errorMessage);
            }
        }

        /// <summary>
        /// Email should be valid  as per regular expression
        /// </summary>
        [TestMethod]
        public async Task EmailRegExp()
        {
            //Arrange
            CustomerBL CustomerBL = new CustomerBL();
            Customer Customer = new Customer() { CustomerName = "scott", CustomerMobile = "9876543210", CustomerAddress = "ScZXCV254GV", Email = "scottgmailcom", CustomerAadharNumber = "82573098851", CustomerPANNumber = "ADKPC1977R", CustomerGender = PecuniaHelpers.Gender.Male, CustomerDOB = Convert.ToDateTime("1997-02-22"), WorkExperience = 3.5, AnnualIncome = 234567 };
            bool isAdded = false;
            string errorMessage = null;

            //Act
            try
            {
                isAdded = await CustomerBL.AddCustomerBL(Customer);
            }
            catch (Exception ex)
            {
                isAdded = false;
                errorMessage = ex.Message;
            }
            finally
            {
                //Assert
                Assert.IsFalse(isAdded, errorMessage);
            }
        }

        /// <summary>
        /// Address should contain minimum two characters
        /// </summary>
        [TestMethod]
        public async Task CustomerAddressShouldContainAtLeastTwoCharacters()
        {
            //Arrange
            CustomerBL CustomerBL = new CustomerBL();
            Customer Customer = new Customer() { CustomerName = "scott", CustomerMobile = "9876543210", CustomerAddress = "S", Email = "scott@gmail.com", CustomerAadharNumber = "82573098851", CustomerPANNumber = "ADKPC1977R", CustomerGender = PecuniaHelpers.Gender.Male, CustomerDOB = Convert.ToDateTime("1997-02-22"), WorkExperience = 3.5, AnnualIncome = 234567 };
            bool isAdded = false;
            string errorMessage = null;

            //Act
            try
            {
                isAdded = await CustomerBL.AddCustomerBL(Customer);
            }
            catch (Exception ex)
            {
                isAdded = false;
                errorMessage = ex.Message;
            }
            finally
            {
                //Assert
                Assert.IsFalse(isAdded, errorMessage);
            }
        }

        /// <summary>
        /// Aadhar number should be valid as per regula expression
        /// </summary>
        [TestMethod]
        public async Task CustomerAadharNumberRegExp()
        {
            //Arrange
            CustomerBL CustomerBL = new CustomerBL();
            Customer Customer = new Customer() { CustomerName = "scott", CustomerMobile = "9876543210", CustomerAddress = "Sfghjkfghj", Email = "scott@gmail.com", CustomerAadharNumber = "825730", CustomerPANNumber = "ADKPC1977R", CustomerGender = PecuniaHelpers.Gender.Male, CustomerDOB = Convert.ToDateTime("1997-02-22"), WorkExperience = 3.5, AnnualIncome = 234567 };
            bool isAdded = false;
            string errorMessage = null;

            //Act
            try
            {
                isAdded = await CustomerBL.AddCustomerBL(Customer);
            }
            catch (Exception ex)
            {
                isAdded = false;
                errorMessage = ex.Message;
            }
            finally
            {
                //Assert
                Assert.IsFalse(isAdded, errorMessage);
            }
        }

        /// <summary>
        /// PAN number should be valid as per regula expression
        /// </summary>
        [TestMethod]
        public async Task CustomerPANNumberRegExp()
        {
            //Arrange
            CustomerBL CustomerBL = new CustomerBL();
            Customer Customer = new Customer() { CustomerName = "scott", CustomerMobile = "9876543210", CustomerAddress = "Sfghjkfghj", Email = "scott@gmail.com", CustomerAadharNumber = "825736098851", CustomerPANNumber = "ADKPC1", CustomerGender = PecuniaHelpers.Gender.Male, CustomerDOB = Convert.ToDateTime("1997-02-22"), WorkExperience = 3.5, AnnualIncome = 234567 };
            bool isAdded = false;
            string errorMessage = null;

            //Act
            try
            {
                isAdded = await CustomerBL.AddCustomerBL(Customer);
            }
            catch (Exception ex)
            {
                isAdded = false;
                errorMessage = ex.Message;
            }
            finally
            {
                //Assert
                Assert.IsFalse(isAdded, errorMessage);
            }
        }

    }

    [TestClass]
    public class UpdateCustomerBLTest
    {
        /// <summary>
        /// Update Customer details if it is valid.
        /// </summary>
        [TestMethod]
        public async Task UpdateValidCustomer()
        {
            //Arrange
            CustomerBL customerBL = new CustomerBL();
            Customer customer = new Customer() { CustomerName = "Scott", CustomerMobile = "9876543210", CustomerAddress = "ScZXCV254GV", Email = "scott@gmail.com"};
            bool isUpdated = false;
            string errorMessage = null;

            //Act
            try
            {
                isUpdated = await customerBL.UpdateCustomerBL(customer);
            }
            catch (Exception ex)
            {
                isUpdated = false;
                errorMessage = ex.Message;
            }
            finally
            {
                //Assert
                Assert.IsTrue(isUpdated, errorMessage);
            }
        }

        /// <summary>
        /// Customer Name can't be null
        /// </summary>
        [TestMethod]
        public async Task CustomerNameCanNotBeNull()
        {
            //Arrange
            CustomerBL customerBL = new CustomerBL();
            Customer customer = new Customer() { CustomerName = null, CustomerMobile = "9876543210", CustomerAddress = "ScZXCV254GV", Email = "scott@gmail.com"};
            bool isUpdated = false;
            string errorMessage = null;

            //Act
            try
            {
                isUpdated = await customerBL.UpdateCustomerBL(customer);
            }
            catch (Exception ex)
            {
                isUpdated = false;
                errorMessage = ex.Message;
            }
            finally
            {
                //Assert
                Assert.IsFalse(isUpdated, errorMessage);
            }
        }

        /// <summary>
        /// Customer Mobile can't be null
        /// </summary>
        [TestMethod]
        public async Task CustomerMobileCanNotBeNull()
        {
            //Arrange
            CustomerBL CustomerBL = new CustomerBL();
            Customer Customer = new Customer() { CustomerName = "Scott", CustomerMobile = null, CustomerAddress = "ScZXCV254GV", Email = "scott@gmail.com" };
            bool isUpdated = false;
            string errorMessage = null;

            //Act
            try
            {
                isUpdated = await CustomerBL.UpdateCustomerBL(Customer);
            }
            catch (Exception ex)
            {
                isUpdated = false;
                errorMessage = ex.Message;
            }
            finally
            {
                //Assert
                Assert.IsFalse(isUpdated, errorMessage);
            }
        }

        /// <summary>
        /// Customer Address can't be null
        /// </summary>
        [TestMethod]
        public async Task CustomerAddressCanNotBeNull()
        {
            //Arrange
            CustomerBL CustomerBL = new CustomerBL();
            Customer Customer = new Customer() { CustomerName = "Scott", CustomerMobile = "9179998190", CustomerAddress = null, Email = "scott@gmail.com" };
            bool isUpdated = false;
            string errorMessage = null;

            //Act
            try
            {
                isUpdated = await CustomerBL.UpdateCustomerBL(Customer);
            }
            catch (Exception ex)
            {
                isUpdated = false;
                errorMessage = ex.Message;
            }
            finally
            {
                //Assert
                Assert.IsFalse(isUpdated, errorMessage);
            }
        }

        /// <summary>
        /// Customer Email can't be null
        /// </summary>
        [TestMethod]
        public async Task CustomerEmailCanNotBeNull()
        {
            //Arrange
            CustomerBL CustomerBL = new CustomerBL();
            Customer Customer = new Customer() { CustomerName = "Scott", CustomerMobile = "9876543210", CustomerAddress = "ScZXCV254GV", Email = null };
            bool isUpdated = false;
            string errorMessage = null;

            //Act
            try
            {
                isUpdated = await CustomerBL.UpdateCustomerBL(Customer);
            }
            catch (Exception ex)
            {
                isUpdated = false;
                errorMessage = ex.Message;
            }
            finally
            {
                //Assert
                Assert.IsFalse(isUpdated, errorMessage);
            }
        }
       
        /// <summary>
        /// CustomerName should contain at least two characters
        /// </summary>
        [TestMethod]
        public async Task CustomerNameShouldContainAtLeastTwoCharacters()
        {
            //Arrange
            CustomerBL CustomerBL = new CustomerBL();
            Customer Customer = new Customer() { CustomerName = "J", CustomerMobile = "9876543210", CustomerAddress = "ScZXCV254GV", Email = "scott@gmail.com" };
            bool isUpdated = false;
            string errorMessage = null;

            //Act
            try
            {
                isUpdated = await CustomerBL.UpdateCustomerBL(Customer);
            }
            catch (Exception ex)
            {
                isUpdated = false;
                errorMessage = ex.Message;
            }
            finally
            {
                //Assert
                Assert.IsFalse(isUpdated, errorMessage);
            }
        }

        /// <summary>
        /// CustomerMobile should be a valid mobile number
        /// </summary>
        [TestMethod]
        public async Task CustomerMobileRegExp()
        {
            //Arrange
            CustomerBL CustomerBL = new CustomerBL();
            Customer Customer = new Customer() { CustomerName = "scott", CustomerMobile = "9876", CustomerAddress = "ScZXCV254GV", Email = "scott@gmail.com" };
            bool isUpdated = false;
            string errorMessage = null;

            //Act
            try
            {
                isUpdated = await CustomerBL.UpdateCustomerBL(Customer);
            }
            catch (Exception ex)
            {
                isUpdated= false;
                errorMessage = ex.Message;
            }
            finally
            {
                //Assert
                Assert.IsFalse(isUpdated, errorMessage);
            }
        }

        /// <summary>
        /// Email should be valid  as per regular expression
        /// </summary>
        [TestMethod]
        public async Task EmailRegExp()
        {
            //Arrange
            CustomerBL CustomerBL = new CustomerBL();
            Customer Customer = new Customer() { CustomerName = "scott", CustomerMobile = "9876543210", CustomerAddress = "ScZXCV254GV", Email = "scottgmailcom" };
            bool isUpdated = false;
            string errorMessage = null;

            //Act
            try
            {
                isUpdated = await CustomerBL.UpdateCustomerBL(Customer);
            }
            catch (Exception ex)
            {
                isUpdated = false;
                errorMessage = ex.Message;
            }
            finally
            {
                //Assert
                Assert.IsFalse(isUpdated, errorMessage);
            }
        }

        /// <summary>
        /// Address should contain minimum two characters
        /// </summary>
        [TestMethod]
        public async Task CustomerAddressShouldContainAtLeastTwoCharacters()
        {
            //Arrange
            CustomerBL CustomerBL = new CustomerBL();
            Customer Customer = new Customer() { CustomerName = "scott", CustomerMobile = "9876543210", CustomerAddress = "S", Email = "scott@gmail.com" };
            bool isUpdated = false;
            string errorMessage = null;

            //Act
            try
            {
                isUpdated = await CustomerBL.UpdateCustomerBL(Customer);
            }
            catch (Exception ex)
            {
                isUpdated = false;
                errorMessage = ex.Message;
            }
            finally
            {
                //Assert
                Assert.IsFalse(isUpdated, errorMessage);
            }
        }

        

    }

    [TestClass]
    public class SearchCustomerbyCustomerNumber


}